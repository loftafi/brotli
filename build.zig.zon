.{
    // This is the default name used by packages depending on this one. For
    // example, when a user runs `zig fetch --save <url>`, this field is used
    // as the key in the `dependencies` table. Although the user can choose a
    // different name, most users will stick with this provided value.
    //
    // It is redundant to include "zig" in this name because it is already
    // within the Zig package namespace.
    .name = .brotli,

    // This is a [Semantic Version](https://semver.org/).
    // In a future version of Zig it will be used for package deduplication.
    .version = "0.0.0",

    // Together with name, this represents a globally unique package
    // identifier. This field is generated by the Zig toolchain when the
    // package is first created, and then *never changes*. This allows
    // unambiguous detection of one package being an updated version of
    // another.
    //
    // When forking a Zig project, this id should be regenerated (delete the
    // field and run `zig build`) if the upstream project is still maintained.
    // Otherwise, the fork is *hostile*, attempting to take control over the
    // original project's identity. Thus it is recommended to leave the comment
    // on the following line intact, so that it shows up in code reviews that
    // modify the field.
    .fingerprint = 0xba7766d398a373a0, // Changing this has security and trust implications.

    // Tracks the earliest Zig version that the package considers to be a
    // supported use case.
    .minimum_zig_version = "0.14.0",

    // This field is optional.
    // Each dependency must either provide a `url` and `hash`, or a `path`.
    // `zig build --fetch` can be used to fetch all dependencies of a package, recursively.
    // Once all dependencies are fetched, `zig build` no longer requires
    // internet connectivity.
    .dependencies = .{
        // See `zig fetch --save <url>` for a command-line interface for adding dependencies.
        //.example = .{
        //    // When updating this field to a new URL, be sure to delete the corresponding
        //    // `hash`, otherwise you are communicating that you expect to find the old hash at
        //    // the new URL. If the contents of a URL change this will result in a hash mismatch
        //    // which will prevent zig from using it.
        //    .url = "https://example.com/foo.tar.gz",
        //
        //    // This is computed from the file contents of the directory of files that is
        //    // obtained after fetching `url` and applying the inclusion rules given by
        //    // `paths`.
        //    //
        //    // This field is the source of truth; packages do not come from a `url`; they
        //    // come from a `hash`. `url` is just one of many possible mirrors for how to
        //    // obtain a package matching this `hash`.
        //    //
        //    // Uses the [multihash](https://multiformats.io/multihash/) format.
        //    .hash = "...",
        //
        //    // When this is provided, the package is found in a directory relative to the
        //    // build root. In this case the package's hash is irrelevant and therefore not
        //    // computed. This field and `url` are mutually exclusive.
        //    .path = "foo",
        //
        //    // When this is set to `true`, a package is declared to be lazily
        //    // fetched. This makes the dependency only get fetched if it is
        //    // actually used.
        //    .lazy = false,
        //},
    },

    // Specifies the set of files and directories that are included in this package.
    // Only files and directories listed here are included in the `hash` that
    // is computed for this package. Only files listed here will remain on disk
    // when using the zig package manager. As a rule of thumb, one should list
    // files required for compilation plus any license(s).
    // Paths are relative to the build root. Use the empty string (`""`) to refer to
    // the build root itself.

    // A directory listed here means that all files within, recursively, are included.
    .paths = .{
        "build.zig",
        "build.zig.zon",
        "src",
        "c/tools/brotli.c",
        "c/include",
        "c/include/brotli",
        "c/include/brotli/shared_dictionary.h",
        "c/include/brotli/port.h",
        "c/include/brotli/types.h",
        "c/include/brotli/encode.h",
        "c/include/brotli/decode.h",
        "c/enc/hash_longest_match64_inc.h",
        "c/enc/cluster.h",
        "c/enc/backward_references.h",
        "c/enc/hash_to_binary_tree_inc.h",
        "c/enc/utf8_util.h",
        "c/enc/encoder_dict.h",
        "c/enc/dictionary_hash.c",
        "c/enc/backward_references_hq.c",
        "c/enc/bit_cost_inc.h",
        "c/enc/find_match_length.h",
        "c/enc/histogram.c",
        "c/enc/bit_cost.h",
        "c/enc/memory.c",
        "c/enc/params.h",
        "c/enc/brotli_bit_stream.h",
        "c/enc/entropy_encode.c",
        "c/enc/compound_dictionary.c",
        "c/enc/fast_log.h",
        "c/enc/compress_fragment_two_pass.c",
        "c/enc/block_splitter.c",
        "c/enc/compress_fragment.h",
        "c/enc/static_dict_lut.h",
        "c/enc/static_dict.h",
        "c/enc/block_splitter_inc.h",
        "c/enc/quality.h",
        "c/enc/cluster_inc.h",
        "c/enc/command.c",
        "c/enc/metablock.h",
        "c/enc/hash_composite_inc.h",
        "c/enc/literal_cost.h",
        "c/enc/block_encoder_inc.h",
        "c/enc/metablock_inc.h",
        "c/enc/hash_forgetful_chain_inc.h",
        "c/enc/hash_longest_match_quickly_inc.h",
        "c/enc/encode.c",
        "c/enc/backward_references_hq.h",
        "c/enc/dictionary_hash.h",
        "c/enc/encoder_dict.c",
        "c/enc/cluster.c",
        "c/enc/backward_references.c",
        "c/enc/utf8_util.c",
        "c/enc/block_splitter.h",
        "c/enc/compress_fragment.c",
        "c/enc/entropy_encode.h",
        "c/enc/compress_fragment_two_pass.h",
        "c/enc/fast_log.c",
        "c/enc/compound_dictionary.h",
        "c/enc/hash_longest_match_inc.h",
        "c/enc/brotli_bit_stream.c",
        "c/enc/histogram.h",
        "c/enc/memory.h",
        "c/enc/bit_cost.c",
        "c/enc/command.h",
        "c/enc/write_bits.h",
        "c/enc/static_dict.c",
        "c/enc/histogram_inc.h",
        "c/enc/prefix.h",
        "c/enc/state.h",
        "c/enc/hash.h",
        "c/enc/hash_rolling_inc.h",
        "c/enc/ringbuffer.h",
        "c/enc/literal_cost.c",
        "c/enc/entropy_encode_static.h",
        "c/enc/backward_references_inc.h",
        "c/enc/metablock.c",
        "c/common/dictionary.c",
        "c/common/constants.c",
        "c/common/version.h",
        "c/common/transform.c",
        "c/common/dictionary.bin.br",
        "c/common/context.h",
        "c/common/dictionary.bin",
        "c/common/platform.c",
        "c/common/constants.h",
        "c/common/shared_dictionary.c",
        "c/common/dictionary.h",
        "c/common/transform.h",
        "c/common/shared_dictionary_internal.h",
        "c/common/context.c",
        "c/common/platform.h",
        "c/dec/state.c",
        "c/dec/bit_reader.h",
        "c/dec/decode.c",
        "c/dec/huffman.c",
        "c/dec/bit_reader.c",
        "c/dec/prefix.h",
        "c/dec/state.h",
        "c/dec/huffman.h",
        "c/fuzz/decode_fuzzer.c",
        "c/fuzz/test_fuzzer.sh",
        "c/fuzz/run_decode_fuzzer.c",
    },
}
